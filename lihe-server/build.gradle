dependencies {
    testCompile group: 'junit', name: 'junit', version: junitVersion
    testCompile(group: 'org.assertj', name: 'assertj-core', version: assertjVersion)
    testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion)
    testCompile(group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion)

    compile(
            [group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springBootVersion],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: springBootVersion],


    )
    compile project(':common')
    compile project(':database')
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath group: 'org.flywaydb', name: 'flyway-gradle-plugin', version: flywayVersion
    }
}

ext {
    Properties properties = new Properties();
    properties.load(new FileInputStream(file("$environmentPah/application-database.properties")))
    if (properties.getProperty("datasource.otherDs") == 'true') {
        dbPort = properties.getProperty("datasource.others.port")
    } else {
        dbPort = properties.getProperty("datasource.master.port")
    }
    flywayPort = System.getProperty('port', dbPort)
}

apply plugin: 'org.flywaydb.flyway'

flyway {
    url = "jdbc:mysql://localhost:$flywayPort/lihe?useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true"
    baselineOnMigrate = true
    user = "root"
    password = "root"
    baselineVersion = 0
    outOfOrder = true
}

sourceSets {
    main {
        resources {
            srcDirs = ["src/main/resources", environmentPah]
        }
    }
}
